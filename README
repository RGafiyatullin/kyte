This thing is aimed to bind Erlang to Kyoto Cabinet via a nif-library.

The main aim is to move the long-playing requests to the separate thread in order not to bother BEAM scheduler. 

Usage:
	Use 'kyte' module.
	Basic operations supported: get, set, remove, clear, size, count.
	Those are done by kyte_db_srv behaving as gen_server.
	Servers (kyte_db_srv) are affiliated to the thread pools. 
	You can create multiple thread pools within one Erlang-node.
	
	-spec pool_create( PoolSize ::integer() ) -> {ok, Pool :: pid()} | {error, any()}.
	-spec pool_destroy( Pool :: pid() ) -> ok | {error, any()}.

	-type kyte_value_codec() :: 
		  raw   % raw binaries
		| etf   % the erlang terms are converted to ETF (with erlang:term_to_binary/1)
		| sext  % the erlang terms are converted to SEXT (with sext:encode/1)
		| rawz  % raw binaries are zipped (with zlib:zip/1)
		| etfz. % the terms are converted to ETF and zipped
	
	
	-type hash_fun_term() :: fun( ( any() ) -> integer() ).
	-type hash_fun_bin() :: fun( ( binary() ) -> integer() ).

	-type kyte_partitioning_type() ::
		  single 
		| {pre_hash, Count :: integer(), HF :: hash_fun_term() }
		| {post_hash, Count :: integer(), HF :: hash_fun_bin() }.

	-record(kyte_db_args, {
		file :: string(),
		
		key_codec = etf :: kyte_value_codec(),
		val_codec = etf :: kyte_value_codec(),

		parts = single :: kyte_partitioning_type()
	}).
	
	-type kyte_db_args() :: #kyte_db_args{}.

	-type kyte_db() :: pid().
	
	-spec pool_create( PoolSize ::integer() ) -> {ok, Pool :: pid()} | {error, any()}.
	-spec pool_destroy( Pool :: pid() ) -> ok | {error, any()}.

	-spec db_open( Pool :: pid(), kyte_db_args() ) -> {ok, DbSrv :: pid() }.
	-spec db_close( DbSrv :: pid() ) -> ok.

	-spec db_set( DbSrv :: pid(), K :: term(), V :: term() ) -> ok | {error, any()}.
	-spec db_get( DbSrv :: pid(), K :: term() ) -> {ok, Value :: term()} | {error, any()}.
	-spec db_del( DbSrv :: pid(), K :: term() ) -> ok | {error, any()}.

	-spec db_count( DbSrv :: pid() ) -> {ok, integer()} | {error, any()}.
	-spec db_size( DbSrv :: pid() ) -> {ok, integer()} | {error, any()}.
	-spec db_clear( DbSrv :: pid() ) -> ok | {error, any()}.



